import express from 'express';
import bodyParser from 'body-parser';
//import {filterImageFromURL, deleteLocalFiles} from './util/util';
import { FilterImageFromURLRouter , DeleteLocalFilesRouter  } from './util/util';
//import { FilterImageFromURLRouter } from './util/util';

import { Router, Request, Response } from 'express';

const router: Router = Router();

(async () => {

  // Init the Express application
  const app = express();

  // Set the network port
  const port = process.env.PORT || 8082;

  // Use the body parser middleware for post requests
  app.use(bodyParser.json());

  // @TODO1 IMPLEMENT A RESTFUL ENDPOINT
  // GET /filteredimage?image_url={{URL}}
  // endpoint to filter an image from a public url.
  // IT SHOULD
  //    1
  //    1. validate the image_url query
  //    2. call filterImageFromURL(image_url) to filter the image
  //    3. send the resulting file in the response
  //    4. deletes any files on the server on finish of the response
  // QUERY PARAMATERS
  //    image_url: URL of a publicly accessible image
  // RETURNS
  //   the filtered image file [!!TIP res.sendFile(filteredpath); might be useful]

  /**************************************************************************** */

  //! END @TODO1

  app.use(function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "http://localhost:8100");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization");
    next();
  });

  app.use('/filteredimage/:image_url', router)

  app.get( "/", async ( req, res ) => {
    res.send( "/filteredimage/" );
  });

  // Root Endpoint
  // Displays a simple message to the user
  //app.get( "/", async ( req, res ) => {
  //    res.status(404)
  //      .send(`Not found`);
  //});



  /*app.get( "/filteredimage/:image_url", async ( req, res ) => {
      console.log(`router`);
  });*/
  //app.get( "/filteredimage/", async ( req, res) => {
  router.get( "/filteredimage/", async ( req: Request, res: Response ) => {
    //res.send("try GET /filteredimage?image_url={{}}");
    //res.sendFile(filteredpath);
    //res.send("/filteredimage");
    let { image_url } = req.query;
    //console.log(`query url : ${image_url}`);
    //console.log(filterImageFromURL(image_url));
    //filterImageFromURL(image_url)
    //const filteredpath = filterImageFromURL(image_url);
    //console.log( `filteredpath : ${filteredpath}` );
    //res.sendFile(filteredpath);
    //res.sendFile('/tmp/filtered.729.jpg');
    //console.log(`1`);
    //res.sendFile(filterImageFromURL(image_url));
    //console.log(`2`);
    //app.use(express.static('/tmp'));
    //res.sendFile(`filtered.1331.jpg`);
    //res.send(`start - ${filterImage}`)
    //res.send(filterImageFromURL(image_url))

    //filterImageFromURL(image_url).then(outputpath=>{res.sendFile(outputpath)}).toPromise();
    //filterImageFromURL(image_url).then(outputpath=>{let promise = fncsendfind(outputpath);let list: string[] = [outputpath];deleteLocalFiles(list);});
    //const result = await new Promise(filterImageFromURL(image_url).then(outputpath =>{res.sendFile(outputpath);return outputpath;}));
    //filterImageFromURL(image_url)
    //.then(outputpath=>{new Promise( async resolve => {res.sendFile(outputpath)});let list: string[] = [outputpath];deleteLocalFiles(list)});

    //async function fncsendfind(outputpath: string) {
    //  await  res.sendFile(outputpath);
    //}

    filterImageFromURL(image_url).then(outputpath=>{res.sendFile(outputpath, function(err) {
          if (! err) {
            let list_delete : string[] = [outputpath]
            deleteLocalFiles(list_delete);
          }
        })
      });


    //const result = filterImageFromURL(image_url).then(outputpath =>{res.sendFile(outputpath).toPromise();return outputpath;});
    //const result =async (filterImageFromURL(image_url).then(outputpath=>{new Promise( async resolve => {res.sendFile(outputpath)});return outputpath;}));
    //let list_delete : string[] = [result]
    //deleteLocalFiles(list_delete);

    router.get('/', async (req: Request, res: Response) => {
        res.send(`V0`);
    });

  } );


  // Start the Server
  app.listen( port, () => {
      console.log( `server running http://localhost:${ port }` );
      console.log( `press CTRL+C to stop server` );
  } );
})();

export const FilterImageFromURLRouter , DeleteLocalFilesRouter : Router = router;
